-- Copyright (c) 2020 Gabriele Venturato
-- 
-- Permission is hereby granted, free of charge, to any person obtaining
-- a copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to
-- permit persons to whom the Software is furnished to do so, subject to
-- the following conditions:
-- 
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
-- 
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-- IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-- CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-- TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-- SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Formula.
--   Generated by the BNF converter, and later customized.

module Formula.Print where

import qualified Formula.Abs
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Formula.Abs.Label where
  prt _ (Formula.Abs.StringLabel l) = doc $ showString l
  prt i (Formula.Abs.FormulaLabel f) = concatD [doc (showString "p_("), prt 0 f, doc (showString " )")]

instance Print Formula.Abs.Formula where
  prt i e = case e of
    Formula.Abs.Implies formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "->"), prt 1 formula2])
    Formula.Abs.Implied formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "<-"), prt 1 formula2])
    Formula.Abs.Iff formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "<->"), prt 1 formula2])
    Formula.Abs.Until formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "U"), prt 3 formula2])
    Formula.Abs.Release formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "R"), prt 3 formula2])
    Formula.Abs.Since formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "S"), prt 3 formula2])
    Formula.Abs.Triggered formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "T"), prt 3 formula2])
    Formula.Abs.And formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "&"), prt 3 formula2])
    Formula.Abs.Or formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "|"), prt 3 formula2])
    Formula.Abs.Next formula -> prPrec i 4 (concatD [doc (showString "X"), prt 4 formula])
    Formula.Abs.Eventually formula -> prPrec i 4 (concatD [doc (showString "F"), prt 4 formula])
    Formula.Abs.Always formula -> prPrec i 4 (concatD [doc (showString "G"), prt 4 formula])
    Formula.Abs.Yesterday formula -> prPrec i 4 (concatD [doc (showString "Y"), prt 4 formula])
    Formula.Abs.Wyesterday formula -> prPrec i 4 (concatD [doc (showString "Z"), prt 4 formula])
    Formula.Abs.Once formula -> prPrec i 4 (concatD [doc (showString "O"), prt 4 formula])
    Formula.Abs.Historically formula -> prPrec i 4 (concatD [doc (showString "H"), prt 4 formula])
    Formula.Abs.Not formula -> prPrec i 4 (concatD [doc (showString "!"), prt 4 formula])
    Formula.Abs.Atom l -> prPrec i 5 (concatD [prt 0 l])
    Formula.Abs.Bool boolean -> prPrec i 5 (concatD [prt 0 boolean])

instance Print Formula.Abs.Boolean where
  prt i e = case e of
    Formula.Abs.BooleanTrue -> prPrec i 0 (concatD [doc (showString "True")])
    Formula.Abs.BooleanFalse -> prPrec i 0 (concatD [doc (showString "False")])