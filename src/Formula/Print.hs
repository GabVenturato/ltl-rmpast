{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Formula.Print where

-- pretty-printer generated by the BNF converter

import Formula.Abs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)
  closingOrPunctuation [c] = c `elem` ")],;"
  closingOrPunctuation _   = False

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print PIdent where
  prt _ (PIdent (_,i)) = doc (showString ( i))



instance Print Formula where
  prt i e = case e of
    Implies formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "->"), prt 1 formula2])
    Implied formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "<-"), prt 1 formula2])
    Iff formula1 formula2 -> prPrec i 0 (concatD [prt 0 formula1, doc (showString "<->"), prt 1 formula2])
    Until formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "U"), prt 3 formula2])
    Release formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "R"), prt 3 formula2])
    Since formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "S"), prt 3 formula2])
    Triggered formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "T"), prt 3 formula2])
    And formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "&"), prt 3 formula2])
    Or formula1 formula2 -> prPrec i 2 (concatD [prt 2 formula1, doc (showString "|"), prt 3 formula2])
    Next formula -> prPrec i 4 (concatD [doc (showString "X"), prt 4 formula])
    Eventually formula -> prPrec i 4 (concatD [doc (showString "F"), prt 4 formula])
    Always formula -> prPrec i 4 (concatD [doc (showString "G"), prt 4 formula])
    Yesterday formula -> prPrec i 4 (concatD [doc (showString "Y"), prt 4 formula])
    Wyesterday formula -> prPrec i 4 (concatD [doc (showString "Z"), prt 4 formula])
    Once formula -> prPrec i 4 (concatD [doc (showString "O"), prt 4 formula])
    Historically formula -> prPrec i 4 (concatD [doc (showString "H"), prt 4 formula])
    Not formula -> prPrec i 4 (concatD [doc (showString "!"), prt 4 formula])
    Atom pident -> prPrec i 5 (concatD [prt 0 pident])
    Bool boolean -> prPrec i 5 (concatD [prt 0 boolean])

instance Print Boolean where
  prt i e = case e of
    Boolean_True -> prPrec i 0 (concatD [doc (showString "True")])
    Boolean_False -> prPrec i 0 (concatD [doc (showString "False")])


